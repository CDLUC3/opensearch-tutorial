# docker gelf log-driver -> Logstash -> OpenSearch pipeline.

input {
  s3 {
      endpoint => "http://minio-server:9000"
      access_key_id => "minioadmin"
      secret_access_key => "minioadmin"
      bucket => "bucket"
      prefix => "test-logs/"
      watch_for_new_files => false
      additional_settings => {
          "force_path_style" => true
      }
    }

}

filter {
  # https://medium.com/@sameera.godakanda/alb-access-logs-in-elasticsearch-69b1acaa6b55
  # https://grokconstructor.appspot.com/groklib/aws
  grok {
    pattern_definitions => { 
      "ELB_REQUEST_LINE" => "(?:%{WORD:verb} %{ELB_URI:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})"
      "ELB_URIPATHPARAM" => "%{URIPATH:path}(?:%{URIPARAM:params})?"
      "ELB_URI" => "%{URIPROTO:proto}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:urihost})?(?:%{ELB_URIPATHPARAM})?"
    }
    # note user_agent is reserved, values do not seem parseable
    # wildcard example %{GREEDYDATA:syslog_message}
    match => [ "message", '%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IP:clientip}:%{INT:clientport:int} (?:(%{IP:backendip}:?:%{INT:backendport:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} %{INT:response:int} %{INT:backend_response:int} %{INT:received_bytes:int} %{INT:bytes:int} "%{ELB_REQUEST_LINE:req}" "%{DATA:user_agent_raw}" %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol} %{NOTSPACE:target_group_arn} %{QUOTEDSTRING:trace_id} "%{DATA:domain_name}" "%{DATA:chosen_cert_arn}" %{NUMBER:matched_rule_priority:int} %{TIMESTAMP_ISO8601:request_creation_time} "%{DATA:actions_executed}" "%{DATA:redirect_url}" "%{DATA:error_reason}" "%{DATA:misc_ip}" "%{DATA:misc_status}" "%{DATA:misc_a}" "%{DATA:misc_b}"']
  }
}

filter {
  date {
    locale => en
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
}

output {
  opensearch {
    hosts => ["https://opensearch:9200"]
    user => "admin"
    password => "admin"
    ssl_certificate_verification => false
  }
}

